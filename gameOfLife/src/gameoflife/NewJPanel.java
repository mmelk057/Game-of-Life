/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gameoflife;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import javax.swing.Timer;

/**
 *
 * @author Max
 */
public class NewJPanel extends javax.swing.JPanel {
   //Creates new GameOfLife Class with 50 columns and 50 rows
   GameOfLife game= new GameOfLife(50,50); 
   //cell size is a 10x10 square
   int cellSize = 10;
   //timer is initialized
   Timer t1 = new Timer(75, new TimerListener());
   /**
     * Creates new form NewJPanel
     */
    public NewJPanel() {
        //when the JPanel is starting up, it randomizes the states of the cells of a new gameboard and the timer starts
        game.generateInitialBoard();
        t1.start();
        initComponents();
        addMouseListener(new mouseListener());
                
    }
    
    public void paintComponent (Graphics g){
    //loops through 2d array and creates a gameboard with specific squares for each cell state
    for(int i=0;i<game.columns;i++){
      for (int j=0;j<game.rows;j++){
        //if cell is dead, square will be white  
        if(game.gameBoard[i][j]==0){
        g.setColor(Color.WHITE);
        g.fillRect(0+(cellSize*i),0+ (cellSize*j), cellSize, cellSize);
        }
        //if cell is alive, square will be black
        else if(game.gameBoard[i][j]==1){
        g.setColor(Color.BLACK);
        g.fillRect(0+(cellSize*i),0+ (cellSize*j),cellSize,cellSize);
        }
      }
    }
    }
    
    private class TimerListener implements ActionListener {
        /**
         * Every tick from the timer creates an action event; every action event moves the ball and repaints the JPanel
         * @param e the event created from the timer tick
         */
        public void actionPerformed(ActionEvent e) {
            //every time the timer ticks, a new gameboard is generated and painted onto the screen
            game.reGenerate();
            repaint();
        }
    }
    
    private class mouseListener implements MouseListener{
        
        /**
         * every time the mouse is clicked on the grid, the mouse's location is found and the cell in that corresponding location becomes alive
         * @param event mouse being clicked
         */
        public void mouseClicked(MouseEvent event){
        if (game.gameBoard[event.getX()/cellSize][event.getY()/cellSize]==1){
        game.gameBoard[event.getX()/cellSize][event.getY()/cellSize]=0; 
        repaint();
        }
        if (game.gameBoard[event.getX()/cellSize][event.getY()/cellSize]==0){
        game.gameBoard[event.getX()/cellSize][event.getY()/cellSize]=1; 
        repaint();
        }
        }
         /**
         * every time the mouse is pressed on the grid, the mouse's location is found and the cell in that corresponding location becomes alive
         * @param event mouse being pressed
         */
        public void mousePressed(MouseEvent event) {
         if (game.gameBoard[event.getX()/cellSize][event.getY()/cellSize]==1){
        game.gameBoard[event.getX()/cellSize][event.getY()/cellSize]=0; 
        repaint();
        }
        if (game.gameBoard[event.getX()/cellSize][event.getY()/cellSize]==0){
        game.gameBoard[event.getX()/cellSize][event.getY()/cellSize]=1; 
        repaint();
        }
        }
        
         /**
         * every time the mouse is released on the grid, the mouse's location is found and the cell in that corresponding location becomes alive
         * @param event mouse being released
         */
        public void mouseReleased(MouseEvent event) {
        if (game.gameBoard[event.getX()/cellSize][event.getY()/cellSize]==1){
        game.gameBoard[event.getX()/cellSize][event.getY()/cellSize]=0; 
        repaint();
        }
        if (game.gameBoard[event.getX()/cellSize][event.getY()/cellSize]==0){
        game.gameBoard[event.getX()/cellSize][event.getY()/cellSize]=1; 
        repaint();
        }
        }
        public void mouseEntered(MouseEvent event) {
        
        }
        public void mouseExited(MouseEvent event) {
      
        }
    }
    

    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 420, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 317, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
